{"version":3,"sources":["styles/assets/svg/angle-circle-left.svg","components/Country.js","components/Map.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Country","country","dish","description","photo","recipe","handleBack","handlePhotoSource","className","href","onClick","alt","src","back","target","Map","props","URL","hostname","handleAlphabetise","array","sort","state","selected","bind","handleAbout","handleList","this","setState","setTimeout","current","about","list","countries","geoUrl","objects","ne_50m_admin_0_countries","geometries","SwitchTransition","CSSTransition","classNames","transitionAppearTimeout","key","in","unmountOnExit","appear","width","data-tip","projectionConfig","scale","geography","geographies","map","geo","rsmKey","onMouseEnter","NAME","properties","setTooltipContent","onMouseLeave","DISH","DESCRIPTION","PHOTO","RECIPE","handleEnter","fill","stroke","strokeWidth","style","default","outline","hover","pressed","id","class","a","b","COUNTRY","Component","memo","Home","useState","content","setContent","App","Boolean","window","location","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78a2cad0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/angle-circle-left.01f72c9e.svg\";","import React from 'react';\nimport back from \"../styles/assets/svg/angle-circle-left.svg\";\n\nconst Country = ({ country, dish, description, photo, recipe, handleBack, handlePhotoSource }) => {\n\n    return (\n        !dish ? \n        <article className=\"country\">\n            <header className=\"countryHeader\">\n                <a href=\"#\" onClick={ handleBack }><img alt=\"backwards arrow\" src={ back } className=\"button\"></img></a>\n                <div className=\"countryTitles\">\n                    <h1 className=\"heading\">{ country }</h1>\n                    <h2 className=\"subHeading\">It's a mystery to me to...</h2>\n                </div>\n            </header>\n            <section className=\"countryBody\">\n                <p className=\"text description\">The data for this country hasn't been added yet - please check back later!</p>\n            </section>\n        </article>\n        :\n        <article className=\"country\">\n            <header className=\"countryHeader\">\n                <a href=\"#\" onClick={ handleBack }><img alt=\"backwards arrow\" src={ back } className=\"button\"></img></a>\n                <div className=\"countryTitles\">\n                    <h1 className=\"heading\">{ country }</h1>\n                    <h2 className=\"subHeading\">{ dish }</h2>\n                </div>\n            </header>\n            <section className=\"countryBody\">\n                <figure className=\"photoContainer\">\n                    <img className=\"photo\" src={ photo } alt={ `${ dish }, the national dish of ${ country }` } />\n                    <figcaption className=\"caption\">Photo courtesy of { handlePhotoSource(photo) }</figcaption>\n                </figure>\n                <div className=\"description\">\n                    <p className=\"text\">{ description }</p>\n                    <a href={ recipe } target=\"_blank\" className=\"text link\">Recipe</a>\n                </div>\n            </section>\n        </article>\n    );\n}\n\nexport default Country;","import React, { memo, Component } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport geoUrl from \"../data/topo.json\";\nimport Country from './Country'\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\n\nclass Map extends Component { \n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            country: \"\",\n            dish: \"\",\n            description: \"\",\n            photo: \"\",\n            recipe: \"\",\n            selected: false,\n        }\n\n        this.handleBack = this.handleBack.bind(this);\n        this.handleAbout = this.handleAbout.bind(this);\n        this.handleList = this.handleList.bind(this);\n    }\n\n    handleEnter(country, dish, description, photo, recipe){\n        this.setState({\n            country: country,\n            dish: dish,\n            description: description,\n            photo: photo,\n            recipe: recipe\n        })\n    }\n\n    handleBack(){\n        setTimeout(() => {\n            this.setState({\n                country: \"\",\n                dish: \"\",\n                description: \"\",\n                photo: \"\",\n                recipe: \"\",\n                selected: false\n            })\n        }, 1000);\n    }\n\n    handleAbout(){\n        let current = this.state.about;\n        this.setState({\n            about: !current\n        })\n    }\n\n    handleList(){\n        let current = this.state.list;\n        this.setState({\n            list: !current\n        })\n    }\n\n    handlePhotoSource = (photo) => {\n        const url = new URL(photo);\n        return url.hostname;\n    }\n\n    handleAlphabetise = (array) => {\n        return array.sort();\n    }\n    \n    render(){ \n    \n        const { country, dish, description, photo, recipe, selected } = this.state;\n        const countries = geoUrl.objects.ne_50m_admin_0_countries.geometries;\n\n        return(\n            <SwitchTransition>\n                <CSSTransition\n                    classNames=\"transition\"\n                    transitionAppearTimeout={50000}\n                    key={ selected }\n                    in={ selected }\n                    unmountOnExit\n                    appear\n                >         \n                    <> \n                        <section className=\"map\">\n                            <header className=\"header\">\n                                <button className=\"headButton\" onClick={ this.handleAbout }><a className=\"subHeading\" href=\"#about\">About</a></button>\n                                <h1 className=\"heading\">Food Atlas</h1>\n                                <button className=\"headButton\" onClick={ this.handleList }><a className=\"subHeading\" href=\"#list\">List</a></button>\n                            </header>\n                            <div className=\"container\">\n                                <ComposableMap width=\"1200\" data-tip=\"\" projectionConfig={{ scale: 200 }} >\n                                    <ZoomableGroup>\n                                        <Geographies geography={geoUrl}>\n                                            {({ geographies }) =>\n                                                geographies.map(geo =>\n                                                    <a href=\"#country\">\n                                                        <Geography \n                                                            key={geo.rsmKey} \n                                                            geography={geo}\n                                                            onMouseEnter={() => {\n                                                                const { NAME } = geo.properties;\n                                                                this.props.setTooltipContent(`${NAME}`);\n                                                            }}\n                                                            onMouseLeave={() => {\n                                                                this.props.setTooltipContent(\"\");\n                                                            }}\n                                                            onClick={() => {\n                                                                const { NAME, DISH, DESCRIPTION, PHOTO, RECIPE } = geo.properties;\n                                                                this.handleEnter(NAME, DISH, DESCRIPTION, PHOTO, RECIPE);\n                                                            }}\n                                                            fill=\"#44BBA4\"\n                                                            stroke=\"#E94F37\"\n                                                            strokeWidth=\"0.5\"\n                                                            style={{\n                                                                default: {\n                                                                    outline: 'none'\n                                                                },\n                                                                hover: {\n                                                                    fill: \"#E94F37\",\n                                                                    outline: 'none'\n                                                                },\n                                                                pressed: {\n                                                                    outline: 'none'\n                                                                }\n                                                            }}\n                                                        />\n                                                    </a>\n                                                )\n                                            }\n                                        </Geographies>\n                                    </ZoomableGroup>\n                                </ComposableMap>\n                            </div>\n                            <div className=\"overlay\" id=\"about\">\n                                <aside className=\"about\">\n                                    <a class=\"close\" href=\"#\" onClick={ this.handleAbout }>&times;</a>\n                                    <div className=\"aboutText\">\n                                        <p className=\"asideText centre\">Welcome to the Food Atlas!</p>\n                                        <p className=\"asideText\">Travel around the world in 197(ish) dishes by simply clicking on a country to find out about one of its signature national dishes.</p>\n                                        <p className=\"asideText\">Some small nations may be hard to locate on the map due to its resolution, so please find them on the list instead if you are struggling!</p>\n                                    </div>\n                                </aside>\n                            </div>\n                            <div className=\"overlay\" id=\"list\">\n                                <aside className=\"list\">\n                                    <a class=\"close\" href=\"#\" onClick={ this.handleList }>&times;</a>\n                                    <ul className=\"countryList\">\n                                        { countries.sort((a, b) => (a.properties.NAME > b.properties.NAME) ? 1 : -1).map(geo =>\n                                            geo.properties.COUNTRY ?\n                                            <li className=\"listItem\"><a href=\"#country\" onClick={() => {\n                                                const { NAME, DISH, DESCRIPTION, PHOTO, RECIPE } = geo.properties;\n                                                this.handleEnter(NAME, DISH, DESCRIPTION, PHOTO, RECIPE);\n                                            }}>{ geo.properties.NAME }</a></li>\n                                            : null\n                                        )}\n                                    </ul>\n                                </aside>\n                            </div>\n                            <div className=\"overlay\" id=\"country\">\n                                <Country country={ country } dish={ dish } description={ description } photo={ photo } recipe={ recipe } handleBack={ this.handleBack } handlePhotoSource={ this.handlePhotoSource } />\n                            </div>\n                        </section>\n                    </>\n                </CSSTransition>\n            </SwitchTransition>\n        );\n    }\n}\n\nexport default memo(Map);\n","import React, { useState } from 'react';\nimport Map from './Map';\nimport ReactTooltip from \"react-tooltip\";\n\nconst Home = () => {\n    const [content, setContent] = useState(\"\");\n    return (\n        <>\n            <Map setTooltipContent={ setContent } />\n            <ReactTooltip>{content}</ReactTooltip>\n        </>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport Home from './Home';\nimport \"../styles/css/styles.min.css\";\n\nconst App = () => (\n    <Home />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}