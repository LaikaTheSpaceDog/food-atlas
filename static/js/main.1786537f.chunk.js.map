{"version":3,"sources":["components/Country.js","components/List.js","components/About.js","components/Map.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["Country","props","context","wrapperRef","React","createRef","setWrapperRef","bind","handleClickOutside","document","addEventListener","this","removeEventListener","node","event","selected","contains","target","handleBack","history","push","country","dish","description","photo","recipe","handlePhotoSource","CSSTransition","classNames","transitionappeartimeout","timeout","in","unmountOnExit","appear","exit","className","id","ref","to","onClick","href","rel","src","alt","Component","withRouter","List","list","handleList","countries","geoUrl","objects","ne_50m_admin_0_countries","geometries","handleEnter","sort","a","b","properties","NAME","map","geo","COUNTRY","key","ISO_A3","name","DISH","DESCRIPTION","PHOTO","RECIPE","About","about","handleAbout","Map","URL","hostname","state","cssTrans","setState","setTimeout","current","transitionAppearTimeout","width","style","data-tip","projectionConfig","scale","geography","geographies","rsmKey","onMouseOver","setTooltipContent","onMouseOut","fill","stroke","strokeWidth","default","outline","hover","pressed","cursor","PersistentComponent","memo","Home","useState","content","setContent","App","Boolean","window","location","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1786537f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { CSSTransition } from \"react-transition-group\";\n\nclass Country extends Component {\n    constructor(props, context) {\n        super(props, context);\n        \n        this.wrapperRef = React.createRef();\n        this.setWrapperRef = this.setWrapperRef.bind(this);\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    setWrapperRef(node) {\n        this.wrapperRef = node;\n      }\n    \n    handleClickOutside(event) {\n        if (this.props.selected && this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n            this.props.handleBack();\n            this.props.history.push('/food-atlas/#home');\n        }\n    }\n\n    render(){\n        const { country, dish, description, photo, recipe, handleBack, handlePhotoSource, selected } = this.props;\n\n        return (\n            <CSSTransition\n                classNames=\"transition\"\n                transitionappeartimeout={500}\n                timeout={500}\n                in={ selected }\n                unmountOnExit\n                appear\n                exit\n            >   \n                <div className=\"overlay\" id=\"country\">\n                    <div className=\"wrapper\" ref={this.setWrapperRef}>\n                    {\n                    country && !dish ? \n                        <article className=\"country noData\">\n                            <header className=\"countryHeader\">\n                                <div className=\"countryTitles\">\n                                    <h1 className=\"heading\">{ country }</h1>\n                                    <h2 className=\"subHeading\">It's a mystery to me...</h2>\n                                </div>\n                                <Link to=\"#home\" onClick={ handleBack }><span className=\"button\"></span></Link>\n                            </header>\n                            <section className=\"countryBody\">\n                                <p className=\"text description\">There's currently no data on this place! If you have any suggestions, <span><a className=\"link\" href=\"mailto:oscarjwales@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\">please get in touch</a></span>!</p>\n                            </section>\n                        </article>\n                    : !country ?\n                        <article className=\"country noData\">\n                            <header className=\"countryHeader\">\n                                <div className=\"countryTitles\">\n                                    <h2 className=\"subHeading\">Something went wrong :(</h2>\n                                </div>\n                                <Link to=\"#home\" onClick={ handleBack }><span className=\"button\"></span></Link>\n                            </header>\n                        </article>\n                    :\n                        <article className=\"country\">\n                            <header className=\"countryHeader\">\n                                <a href={ recipe } target=\"_blank\" rel=\"noopener noreferrer\"><span className=\"recipe\"></span></a>\n                                <div className=\"countryTitles\">\n                                    <h1 className=\"heading\">{ country }</h1>\n                                    <h2 className=\"subHeading\">{ dish }</h2>\n                                </div>\n                                <Link to=\"#home\" onClick={ handleBack }><span className=\"button\"></span></Link>\n                            </header>\n                            <section className=\"countryBody\">\n                                <figure className=\"photoContainer\">\n                                    <img className=\"photo\" src={ photo } alt={ `${ dish }, the national dish of ${ country }` } />\n                                    <figcaption className=\"caption\">Photo courtesy of { handlePhotoSource(photo) }</figcaption>\n                                </figure>\n                                <div className=\"description\">\n                                    <p className=\"text\">{ description }</p>\n                                </div>\n                            </section>\n                        </article>\n                    }\n                    </div>\n                </div>\n            </CSSTransition>\n        );\n    };\n};\n\nexport default withRouter(Country);","import React, { Component } from 'react';\nimport geoUrl from \"../data/topo.json\";\nimport { withRouter, Link } from 'react-router-dom';\nimport { CSSTransition } from \"react-transition-group\";\n\nclass List extends Component {\n    \n    constructor(props, context) {\n        super(props, context);\n\n        this.wrapperRef = React.createRef();\n        this.setWrapperRef = this.setWrapperRef.bind(this);\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    setWrapperRef(node) {\n        this.wrapperRef = node;\n      }\n    \n    handleClickOutside(event) {\n        if (this.props.list && this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n            this.props.history.push(\"/food-atlas/#home\");\n            this.props.handleList();\n        }\n    }\n\n    render(){\n\n        const countries = geoUrl.objects.ne_50m_admin_0_countries.geometries;\n        const { handleEnter, handleList, list } = this.props;\n\n        return (\n            <CSSTransition\n                classNames=\"transition\"\n                transitionappeartimeout={500}\n                timeout={5000}\n                in={ list }\n                unmountOnExit\n                appear\n            >   \n                <div className=\"overlay\" id=\"list\">      \n                    <div className=\"wrapper\" ref={this.setWrapperRef}>\n                        <aside className=\"list\">\n                            <Link className=\"close\" href=\"#home\" onClick={handleList}>&times;</Link>\n                            <ul className=\"countryList\">\n                                { countries.sort((a, b) => (a.properties.NAME > b.properties.NAME) ? 1 : -1).map(geo =>\n                                    geo.properties.COUNTRY ?\n                                    <li className=\"listItem\" key={ `${geo.properties.ISO_A3}${geo.properties.name}` }><a href=\"#country\" onClick={() => {\n                                        const { NAME, DISH, DESCRIPTION, PHOTO, RECIPE } = geo.properties;\n                                        handleEnter(NAME, DISH, DESCRIPTION, PHOTO, RECIPE);\n                                    }}>{ geo.properties.NAME }</a></li>\n                                    : null\n                                )}\n                            </ul>\n                        </aside>\n                    </div>\n                </div>\n            </CSSTransition>\n        );\n    }\n}\n\nexport default withRouter(List);","import React, { Component } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { CSSTransition } from \"react-transition-group\";\n\nclass About extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.wrapperRef = React.createRef();\n        this.setWrapperRef = this.setWrapperRef.bind(this);\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    setWrapperRef(node) {\n        this.wrapperRef = node;\n      }\n    \n    handleClickOutside(event) {\n        if (this.props.about && this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n            this.props.history.push('/food-atlas/#home');\n            this.props.handleAbout();\n        }\n    }\n\n    render(){\n        const {handleAbout, about} = this.props;\n\n        return (\n            <CSSTransition\n                classNames=\"transition\"\n                transitionappeartimeout={500}\n                timeout={500}\n                in={ about }\n                unmountOnExit\n                appear\n            >   \n                <div className=\"overlay\" id=\"about\">\n                    <div className=\"wrapper\" ref={this.setWrapperRef}>\n                        <aside className=\"about\">\n                            <Link className=\"close\" to=\"#home\" onClick={handleAbout}>&times;</Link>\n                            <div className=\"aboutText\">\n                                <p className=\"asideText centre\">Welcome to the Food Atlas!</p>\n                                <p className=\"asideText\">Travel around the world in 197(ish) dishes by simply clicking on a country to find out about one of its signature national dishes.</p>\n                                <p className=\"asideText\">Some small nations may be hard to locate on the map due to its resolution, so please find them on the <a className=\"link\" href=\"#list\">list</a> instead if you are struggling!</p>\n                            </div>\n                        </aside>\n                    </div>\n                </div>\n            </CSSTransition>\n        );\n    }\n}\n\nexport default withRouter(About);","import React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport geoUrl from \"../data/topo.json\";\nimport Country from './Country';\nimport List from './List';\nimport About from './About';\nimport { CSSTransition } from \"react-transition-group\";\nimport { PersistentComponent } from 'react-persistent-state';\nimport { Link } from 'react-router-dom';\n\nclass Map extends PersistentComponent { \n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            country: \"\",\n            dish: \"\",\n            description: \"\",\n            photo: \"\",\n            recipe: \"\",\n            selected: false,\n            about: false,\n            list: false,\n            cssTrans: true\n        }\n\n        this.handleBack = this.handleBack.bind(this);\n        this.handleEnter = this.handleEnter.bind(this);\n        this.handleAbout = this.handleAbout.bind(this);\n        this.handleList = this.handleList.bind(this);\n    }\n\n    handleEnter(country, dish, description, photo, recipe){\n        this.setState({\n            country: country,\n            dish: dish,\n            description: description,\n            photo: photo,\n            recipe: recipe,\n            selected: true\n        })\n    }\n\n    handleBack(){\n        this.setState({\n            selected: false\n        });\n        setTimeout(() => {\n            this.setState({\n                country: \"\",\n                dish: \"\",\n                description: \"\",\n                photo: \"\",\n                recipe: \"\"\n            }) \n        }, 500);\n    }\n\n    handlePhotoSource = (photo) => {\n        const url = new URL(photo);\n        return url.hostname;\n    }\n\n    handleAbout(){\n        let current = this.state.about;\n        this.setState({\n            about: !current\n        })\n    }\n\n    handleList(){\n        let current = this.state.list;\n        this.setState({\n            list: !current\n        })\n    }\n    \n    render(){ \n    \n        const { country, dish, description, photo, recipe, selected, about, list, cssTrans } = this.state;\n\n        return(\n            <CSSTransition\n                classNames=\"transition\"\n                transitionAppearTimeout={500}\n                timeout={500}\n                in={ cssTrans }\n                unmountOnExit\n                appear\n            >         \n                <> \n                    <section className=\"map\" id=\"home\">\n                        <header className=\"header\">\n                            <button className=\"headButton\"><a className=\"subHeading\" href=\"#about\" onClick={ this.handleAbout }>About</a></button>\n                            <h1 className=\"heading\">Food Atlas</h1>\n                            <button className=\"headButton\"><a className=\"subHeading\" href=\"#list\" onClick={ this.handleList }>List</a></button>\n                        </header>\n                        <div className=\"container\">\n                            <ComposableMap width={1200} style={{ width: \"100%\" }} data-tip=\"\" projectionConfig={{ scale: 200 }} >\n                                <ZoomableGroup>\n                                    <Geographies geography={geoUrl}>\n                                        {({ geographies }) =>\n                                            geographies.map(geo =>\n                                                <Link to=\"/food-atlas/#country\" key={ geo.properties.NAME }>\n                                                    <Geography \n                                                        key={geo.rsmKey} \n                                                        geography={geo}\n                                                        onMouseOver={() => {\n                                                            const { NAME } = geo.properties;\n                                                            this.props.setTooltipContent(`${NAME}`);\n                                                        }}\n                                                        onMouseOut={() => {\n                                                            this.props.setTooltipContent(\"\");\n                                                        }}\n                                                        onClick={() => {\n                                                            const { NAME, DISH, DESCRIPTION, PHOTO, RECIPE } = geo.properties;\n                                                            this.handleEnter(NAME, DISH, DESCRIPTION, PHOTO, RECIPE);\n                                                            this.props.setTooltipContent(\"\");\n                                                        }}\n                                                        fill=\"#44BBA4\"\n                                                        stroke=\"#E94F37\"\n                                                        strokeWidth=\"0.5\"\n                                                        style={{\n                                                            default: {\n                                                                outline: 'none'\n                                                            },\n                                                            hover: {\n                                                                fill: \"#E94F37\",\n                                                                outline: 'none'\n                                                            },\n                                                            pressed: {\n                                                                outline: 'none'\n                                                            },\n                                                            cursor:'pointer'\n                                                        }}\n                                                    />\n                                                </Link>\n                                            )\n                                        }\n                                    </Geographies>\n                                </ZoomableGroup>\n                            </ComposableMap>\n                        </div>\n                        <About handleAbout={ this.handleAbout } about={about} />\n                        <List handleEnter={ this.handleEnter } handleList={ this.handleList } list={list} />\n                        <Country selected={ selected } country={ country } dish={ dish } description={ description } photo={ photo } recipe={ recipe } handleBack={ this.handleBack } handlePhotoSource={ this.handlePhotoSource } />\n                        <footer className=\"footer\">\n                            <h2 className=\"text\">Made by <a className=\"link\" href=\"https://github.com/LaikaTheSpaceDog\" target=\"_blank\" rel=\"noopener noreferrer\">LaikaTheSpaceDog</a></h2>\n                        </footer>\n                    </section>\n                </>\n            </CSSTransition>\n        );\n    }\n}\n\nexport default memo(Map);\n","import React, { useState } from 'react';\nimport Map from './Map';\nimport ReactTooltip from \"react-tooltip\";\n\nconst Home = () => {\n    const [content, setContent] = useState(\"\");\n    return (\n        <>\n            <Map setTooltipContent={ setContent } />\n            <ReactTooltip>{content}</ReactTooltip>\n        </>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport Home from './Home';\nimport \"../styles/css/styles.min.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst App = () => (\n    <Router>\n        <Home />\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}